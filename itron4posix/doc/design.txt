設計の方針
POSIXは1003.cを対象とする。
タスク情報へのアクセスはmutexにより排他制御する。実際にはtsk_lock,tsk_unlock関数を使用する。タスクのact,deactは条件変数を使って実現する。スケジューラロックはタスクを最高優先度で実行する。（タスク生成にはスレッドの最低優先度+指定されたタスク優先度を用いる）自タスクのIDを得るために、スレッド固有データを利用する。また、「スレッド終了時にデストラクタをコールする」スレッド固有データの機能を利用し、デストラクタ内で再起動の処理を行う。タスク優先度はpk_ctsk内のものを起動時優先度とし、ベース優先度は別途変数で管理する。現在の優先度はPOSIXカーネルしか知り得ないためスレッドパラメータの取得により得る。

ITRONシステムコール内でタスクを待ち状態にする場合はsys_wai_tskを使用する。
この関数では、オブジェクトでロックしたミューテックスを解除し、タスクを待ち状態にする。待ち状態は時限タイプも含める。この関数から抜ける際にはオブジェクトのミューテックスはロックされた状態で戻る。
オブジェクトで待ち状態になったタスクを起床するにはsys_wup_tskを使用する。もし、待ち状態に入ったシステムコールと待ち解除を行うシステムコールが異なる場合はE_SYSが返される。

セマフォはmutexを使って実現する（セマフォ自体はPOSIX1003.bにあるがPOSIX1003.cにはないため）

itron.h,kernel.hは外部公開common.hは内部共通depend.hはシステム固有のPOSIX情報制限事項POSIXスケジューラを使用するためタスク状態が一致しない場合がある。タスク優先度変更時のタスク起動条件の変更およびミューテックス条件の変更は実装依存